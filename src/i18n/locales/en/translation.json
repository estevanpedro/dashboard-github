{
    "Login with your Splitcoin account": "Login with your Splitcoin account",
    "Login with your CDA account": "Login with your CDA account",
    "form": {
        "confirm": "Confirm"
    },
    "navBar": {
        "api": "API",
        "library": "Library",
        "mySplits": "My Splits",
        "profile": "Profile",
        "logout": "Logout",
        "login": "Login"
    },
    "schemeMap": {
        "save": "Save",
        "menuDefaultMessage": "Click on a node to edit it or to add a new one",
        "address": "Address",
        "addNewNode": "Add new node",
        "childrenNodes": "Children Nodes",
        "info": "info",
        "edit": "Edit",
        "SchemeSavedSuccessfully": "Scheme saved successfully!",
        "SchemeDetails": "Scheme Details"
    },
    "library": {
        "title": "Library",
        "name": "Name",
        "balance": "Balance",
        "payout": "Payout",
        "lastTransaction": "Last Transaction"
    },
    "mySchemes": {
        "title": "My Splits",
        "subTitle": "and Schemes",
        "newScheme": "New Scheme",
        "balance": "Balance",
        "lastTransaction": "Last Transaction",
        "Create new scheme": "Create new scheme",
        "schemeName": "Scheme Name",
        "visibility": "Visibility",
        "create": "Create"
    },
    "errors": {
        "emailcantbeempty": "Email can't be empty",
        "namecantbeempty": "Name can't be empty",
        "valuecantbezero": "Value can't be zero"
    },
    "root": {
        "title": "root"
    },
    "split": {
        "title": "Split",
        "splitName": "Split name",
        "share": "Share",
        "shares": "Shares",
        "shareName": "Share name",
        "shareAddress": "Share address (optional)",
        "addShare": "Add share"
    },
    "timer": {
        "title": "Timer",
        "timerName": "Timer name",
        "hours": "Hours",
        "minutes": "Minutes",
        "seconds": "Seconds",
        "Timeshouldnotbe0": "Time should not be 0"
    },
    "notify": {
        "title": "Notify",
        "notifyName": "Notify name",
        "email": "Email",
        "addEmail": "Add email"
    },
    "swap": {
        "title": "Swap",
        "swapName": "Swap name",
        "minimunOf": "Minimum of",
        "to": "to"
    },
    "event": {
        "title": "Event",
        "eventName": "Event Name",
        "value": "Value",
        "above": "above",
        "bellow": "belos"
    },
    "api": {
        "readTheDoc": "Read the documentation in Postman:",
        "What is Split Master": "What is Split Master",
        "As the name says, split them all": "As the name says, split them all",
        "splitMasterDescription": "The Split Master Platform, has the main function, the division of bitcoin, but also, there are several others tools beyond the split, like Timer, Event, Swap and Notify. You can choice whatever you want, and create amazing applications using the dashboard to create visually or the API Rest.",
        "How to create a new scheme using the API": "How to create a new scheme using the API",
        "To create an scheme, use post in /scheme endpoint passing": "To create an scheme, use post in /scheme endpoint passing",
        "and": "and",
        "in the": "in the",
        "object, and the Splitmaster Token in the": "object, and the Splitmaster Token in the",
        "using": "using",
        "as shown in the Postman Documentation": "as shown in the Postman Documentation.",
        "tools": "Tools",
        "Tools are functions that will operate automatically after the": "Tools are functions that will operate automatically after the",
        "receive an amount higher than the minimum payout": "receive an amount higher than the minimum payout.",
        "After the node type split been added, after his father node (always a": "After the node type split been added, after his father node (always a",
        "node or an": "node or an",
        "node)": "node)",
        "it will divide with all his": "it will divide with all his childrens all bitcoin in the father balance, proportionally to the percentages passed.",
        "The process of split, will try to find the ": "The process of split, will try to find the ",
        "and the": "and the",
        "of his childrens with type": "of his childrens with type",
        "It is recommend that the": "It is recommend that the",
        "is set to 100% in the sum of all childrens type": "is set to 100% in the sum of all childrens type",
        "therefore": "Therefore we use an nomalization function, if the sum of percentages is not 100%, we use an <rule of three> to give the proportionally amount. An simple example: Address A has 25% and Address B has 25%, so in the <rule of three>, both will have 50%, closing 100% in the end.",
        "Timer": "Timer",
        "The Tool Timer is used to": "The Tool Timer is used to agend an operation in the future. It requires the ",
        "object with": "object with",
        "fields in the": "fields in the",
        "object Theses values": "object. Theses values will be added to time when the node is processed. A simple example, if the date is 01/01/2020 07:00:00, and the",
        "is equal to": "is equal to",
        "then the next node will execute": "then the next node will execute at 01/01/2020 08:00:00.",
        "The only children node available is the split": "The only children node available is the split.",
        "The Tool Swap is experimental, needs CDA": "The Tool Swap is experimental, needs CDA account logged in the Splitmaster to get the token and the splitmaster",
        "to create the scheme with it": "to create the scheme with it. In the background, we save your CDA account to generate CDA Token and the Splitmaster Token, it will be used when Splitmaster API calls the CDA API Endpoint /trade, to create the swap request, converting all bitcoin above 0.01 BTC to BRL (Reais).",
        "The only children available is notify": "The only children available is notify.",
        "Event": "Event",
        "The Tool Event is used to execute the next": "The Tool Event is used to execute the next node after the price of Bitcoin reach a specific price, It requires the fields",
        "object of event node A simple example": " object of event node. A simple example, if the user select ",
        "equal to US$ 8,00000, and the": " equal to US$ 8,000.00, and the ",
        "When the node is processed, it will create": "When the node is processed, it will create a job in the Splitmaster background, checking the price every 10 minutes, until the price is above of the selected price, then, the next node will be executed.",
        "The only available childrens are": "The only available childrens are",
        "Notify": "Notify",
        "The Tool Notify is used to send an email after the node is executed Whether": "The Tool Notify is used to send an e-mail after the node is executed. Whether",
        "or": "or",
        "It requires the": "It requires the",
        "node": "node",
        "No available childrens": "No available childrens.",
        "The": "The",
        "is where everything happens, the": "is where everything happens, the first node of the user scheme, where children of children of children (â€¦) are located, and it has the",
        "of the node, so it can receive BTC any moment, has": "of the node, so it can receive BTC any moment, has",
        "equal to": "equal to",
        "where the next node will be located": "where the next node will be located.",
        "node is used after the": "node is used after the",
        "node, where all bitcoin's father will be": "node, where all bitcoin's father will be divide. It can receive children of type",
        "It has the": "It has the",
        "object": "object",
        "If the user let the": "If the user let the",
        "field equal to": "field equal to",
        "(None), the Splitmaster API will generate a new": "(None), the Splitmaster API will generate a new address to the node. But if the user add an existing address, can not process any other node after it, so it is the end of the tree for that node.",
        "Clearing all said, the valid children type": "Clearing all said, the valid children type for each father type is shown in the illustration below.",
        "All fields required in the": "All fields required in the",
        "object, is shown below": "object, is shown below.",
        "Any other question about the API": "Any other question about the API, can be found in the Postman documentation"
    },
    "profile": {
        "Profile": "Profile",
        "Username": "Username",
        "Email": "Email",
        "Password": "Password",
        "ChangePassword": "Change Password",
        "User type": "User type",
        "User ID": "User ID,",
        "Language": "Language",
        "findToken": "Find Token"
    }
}